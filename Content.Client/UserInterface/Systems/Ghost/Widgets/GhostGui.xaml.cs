using System.Linq;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Ghost.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.UserInterface.Systems.Ghost.Widgets;

[GenerateTypedNameReferences]
public sealed partial class GhostGui : UIWidget
{
    public GhostTargetWindow TargetWindow { get; }

    public event Action? RequestWarpsPressed;
    public event Action? ReturnToBodyPressed;
    public event Action? GhostRolesPressed;
    public event Action? GhostRespawnPressed;

    public GhostGui()
    {
        RobustXamlLoader.Load(this);

        TargetWindow = new GhostTargetWindow();

        MouseFilter = MouseFilterMode.Ignore;

        GhostWarpButton.OnPressed += _ => RequestWarpsPressed?.Invoke();
        ReturnToBodyButton.OnPressed += _ => ReturnToBodyPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesPressed?.Invoke();
        GhostRespawnButton.OnPressed += _ => GhostRespawnPressed?.Invoke();
    }

    public void Hide()
    {
        TargetWindow.Close();
        Visible = false;
    }

    public void Update(int? roles, bool? canReturnToBody)
    {
        ReturnToBodyButton.Disabled = !canReturnToBody ?? true;

        if (roles != null)
        {
            GhostRolesButton.Text = Loc.GetString("ghost-gui-ghost-roles-button", ("count", roles));
            if (roles > 0)
            {
                GhostRolesButton.StyleClasses.Add(StyleBase.ButtonCaution);
            }
            else
            {
                GhostRolesButton.StyleClasses.Remove(StyleBase.ButtonCaution);
            }
        }

        TargetWindow.Populate();
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            TargetWindow.Dispose();
        }
    }
    
    internal void Confirm()
    {
        GhostRespawnButton.Text = Loc.GetString("ghost-gui-ghost-respawn-confirm");
        GhostRespawnButton.StyleClasses.Remove(StyleBase.ButtonGold);
        GhostRespawnButton.StyleClasses.Add(StyleBase.ButtonCaution);
    }

    internal void Reset()
    {
        GhostRespawnButton.Text = Loc.GetString("ghost-gui-ghost-respawn");
        GhostRespawnButton.StyleClasses.Remove(StyleBase.ButtonCaution);
        GhostRespawnButton.StyleClasses.Add(StyleBase.ButtonGold);
        GhostRespawnButton.Disabled = false;
    }

    public void UpdateTime(int i, bool isAvailable)
    {
        GhostRespawnButton.StyleClasses.Remove(StyleBase.ButtonCaution);
        GhostRespawnButton.StyleClasses.Add(StyleBase.ButtonGold);

        if (!isAvailable)
        {
            GhostRespawnButton.Text =
                Loc.GetString("ghost-gui-ghost-respawn-locked", ("timeRemaining", "")).Split(' ')[0];
            GhostRespawnButton.Disabled = true;
            return;
        }

        if (i <= 0)
        {
            Reset();
        }
        else
        {
            var text = Loc.GetString("ghost-gui-ghost-respawn-locked", ("timeRemaining", i.ToString()));
            GhostRespawnButton.Text = text;
            GhostRespawnButton.Disabled = true;
        }
    }

    public bool UpdateTimePrediction()
    {
        var text = GhostRespawnButton.Text;
        var number = new string((text ?? "0").SkipWhile(c => !char.IsDigit(c))
            .TakeWhile(char.IsDigit)
            .ToArray());

        if (!int.TryParse(
                number, out var time))
            return false;
        if (time > 0)
        {
            GhostRespawnButton.Text = Loc.GetString("ghost-gui-ghost-respawn-locked", ("timeRemaining",
                (time - 1).ToString()));
            GhostRespawnButton.Disabled = true;
        }
        else
        {
            Reset();
            return true;
        }

        return false;
    }
}
