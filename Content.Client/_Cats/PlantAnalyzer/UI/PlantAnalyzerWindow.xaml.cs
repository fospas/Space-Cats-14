using Content.Shared._Cats.PlantAnalyzer;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using System.Linq;
using System.Text;
using FancyWindow = Content.Client.UserInterface.Controls.FancyWindow;

namespace Content.Client._Cats.PlantAnalyzer.UI;

[GenerateTypedNameReferences]
public sealed partial class PlantAnalyzerWindow : FancyWindow
{
    private readonly IEntityManager _entityManager;
    private readonly SpriteSystem _spriteSystem;
    private readonly IPrototypeManager _prototypes;
    private readonly IResourceCache _cache;
    private readonly ButtonGroup _buttonGroup = new();

    public PlantAnalyzerWindow(PlantAnalyzerBoundUserInterface owner)
    {
        RobustXamlLoader.Load(this);

        var dependencies = IoCManager.Instance!;
        _entityManager = dependencies.Resolve<IEntityManager>();
        _spriteSystem = _entityManager.System<SpriteSystem>();
        _prototypes = dependencies.Resolve<IPrototypeManager>();
        _cache = dependencies.Resolve<IResourceCache>();

        OnButton.Group = _buttonGroup;
        OffButton.Group = _buttonGroup;

        OnButton.OnPressed += _ => owner.AdvPressed(true);
        OffButton.OnPressed += _ => owner.AdvPressed(false);
    }

    public void Populate(PlantAnalyzerScannedSeedPlantInformation msg)
    {
        var target = _entityManager.GetEntity(msg.TargetEntity);
        Title = Loc.GetString("plant-analyzer-interface-title");

        if (target == null)
        {
            NoData.Visible = true;
            return;
        }
        NoData.Visible = false;

        if (msg.ScanMode)
        {
            OnButton.ToggleMode = true;
            OnButton.Pressed = true;
        }
        else
        {
            OffButton.ToggleMode = true;
            OffButton.Pressed = true;
        }

        PlantName.Text = Loc.GetString("plant-analyzer-window-label-name-scanned-seed", ("seedName", msg.SeedName));
        if (msg.IsTray) PlantName.Text = Loc.GetString("plant-analyzer-window-label-name-scanned-plant", ("seedName", msg.SeedName));
        // Basics
        PlantYield.Text = Loc.GetString("plant-analyzer-plant-yield-text", ("seedYield", msg.SeedYield));
        Potency.Text = Loc.GetString("plant-analyzer-plant-potency-text", ("seedPotency", msg.SeedPotency));
        Repeat.Text = Loc.GetString("plant-analyzer-plant-harvest-text",("plantHarvestType", Loc.GetString(new StringBuilder("plant-analyzer-harvest-").Append(msg.HarvestType.ToString()).ToString())));
        Endurance.Text = Loc.GetString("plant-analyzer-plant-endurance-text", ("seedEndurance", msg.Endurance));
        Chemicals.Text = Loc.GetString("plant-analyzer-plant-chemistry-text", ("seedChem", msg.SeedChem));
        Gases.Text = Loc.GetString("plant-analyzer-plant-exude-text", ("exudeGases", msg.ExudeGases == "" ? Loc.GetString("plant-analyzer-plant-gasses-no") : msg.ExudeGases));
        Lifespan.Text = Loc.GetString("plant-analyzer-plant-lifespan-text", ("lifespan", msg.Lifespan));
        Maturation.Text = Loc.GetString("plant-analyzer-plant-maturation-text", ("maturation", msg.Maturation));
        GrowthStages.Text = Loc.GetString("plant-analyzer-plant-growthstages-text", ("growthStages", msg.GrowthStages));
        // Tolerances
        NutrientUsage.Text = Loc.GetString("plant-analyzer-tolerance-nutrientusage", ("nutrientUsage", msg.NutrientConsumption == 0 ? "-" : msg.NutrientConsumption));
        WaterUsage.Text = Loc.GetString("plant-analyzer-tolerance-waterusage", ("waterUsage", msg.WaterConsumption == 0 ? "-" : msg.WaterConsumption));
        IdealHeat.Text = Loc.GetString("plant-analyzer-tolerance-idealheat", ("idealHeat", msg.IdealHeat == 0 ? "-" : msg.IdealHeat));
        HeatTolerance.Text = Loc.GetString("plant-analyzer-tolerance-heattoler", ("heatTolerance", msg.HeatTolerance == 0 ? "-" : msg.HeatTolerance));
        IdealLight.Text = Loc.GetString("plant-analyzer-tolerance-ideallight", ("idealLight", msg.IdealLight == 0 ? "-" : msg.IdealLight));
        LightTolerance.Text = Loc.GetString("plant-analyzer-tolerance-lighttoler", ("lightTolerance", msg.LightTolerance == 0 ? "-" : msg.LightTolerance));
        ToxinsTolerance.Text = Loc.GetString("plant-analyzer-tolerance-toxinstoler", ("toxinsTolerance", msg.ToxinsTolerance == 0 ? "-" : msg.ToxinsTolerance));
        LowPressureTolerance.Text = Loc.GetString("plant-analyzer-tolerance-lowpress", ("lowPressureTolerance", msg.LowPressureTolerance == 0 ? "-" : msg.LowPressureTolerance)); ;
        HighPressureTolerance.Text = Loc.GetString("plant-analyzer-tolerance-highpress", ("highPressureTolerance", msg.HighPressureTolerance == 0 ? "-" : msg.HighPressureTolerance));
        PestTolerance.Text = Loc.GetString("plant-analyzer-tolerance-pesttoler", ("pestTolerance", msg.PestTolerance == 0 ? "-" : msg.PestTolerance));
        WeedTolerance.Text = Loc.GetString("plant-analyzer-tolerance-weedtoler", ("weedTolerance", msg.WeedTolerance == 0 ? "-" : msg.WeedTolerance));
        // Misc
        Traits.Text = Loc.GetString("plant-analyzer-plant-mutations-text", ("traits", msg.MutationsList == null ? "-" : msg.MutationsList));
        PlantSpeciation.Text = Loc.GetString("plant-analyzer-plant-speciation-text", ("speciation", msg.Speciation == null ? "-" : new StringBuilder("").AppendJoin("\n   ", msg.Speciation.Select(item => item.ToString())).ToString()));
    }
}